"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useGetIdentity } from "@refinedev/core";

// Dummy authentication check hook.
// Replace this with your actual authProvider logic if needed.
export function useAuthorization() {
  const [loading, setLoading] = useState(true);
  const [authenticated, setAuthenticated] = useState(false);
  const router = useRouter();

  useEffect(() => {
    async function checkAuth() {
      try {
        // For demonstration, we use useGetIdentity below to determine authentication.
        // If no identity, assume not authenticated.
        // In your case, you might call your authProviderServer.check()
        setAuthenticated(true);
      } catch (error) {
        console.error("Authentication check failed:", error);
        router.push("/login");
      } finally {
        setLoading(false);
      }
    }
    checkAuth();
  }, [router]);

  return { loading, authenticated };
}

// Hook to get the current user's ID from refine.
export function useUserId() {
  const { data: identity, isLoading } = useGetIdentity<{ id: string }>();
  return { userId: identity?.id ?? "", loading: isLoading };
}

// Dummy hook to get the user's role.
// Replace this with your actual logic to fetch the user profile/role.
export function useUserRole(userId: string, enabled: boolean) {
  const [role, setRole] = useState<string>("");
  useEffect(() => {
    if (enabled && userId) {
      // In a real scenario, fetch the profile for the userId and extract the role.
      // Here we simulate that by reading from localStorage.
      const storedRole = localStorage.getItem("role") || "New";
      setRole(storedRole);
    }
  }, [userId, enabled]);
  return { role };
}

// Define a mapping of page names to the allowed roles.
const pageRoleMapping: Record<string, string[]> = {
  adminPage: ["Admin", "CEO"],
  developerPage: ["Developer", "Delivery Lead"],
  salesPage: ["Sales Agent"],
  ProfilePage: ["New"], // For example, only users with role "New" can access ProfilePage.
  LedgerPage: ["New"],
  ForgePage: ["New"],
  CRMPage: ["New"],
  CalendarPage: ["New"],
  ProspectsPage: ["New"],
  MainResourcePage: ["New"],


  // Add more mappings as needed.
};

// This is the main hook that takes a page name and enforces authorization.
export function usePageAuthorization(pageName: string) {
  const router = useRouter();
  const { loading: authLoading, authenticated } = useAuthorization();
  const { userId, loading: idLoading } = useUserId();
  const { role } = useUserRole(userId, authenticated && !idLoading);

  const [authorized, setAuthorized] = useState<boolean>(false);

  useEffect(() => {
    if (!authLoading && authenticated && role) {
      const allowedRoles = pageRoleMapping[pageName] || [];
      if (!allowedRoles.includes(role)) {
        router.push("/unauthorized");
      } else {
        setAuthorized(true);
      }
    }
  }, [authLoading, authenticated, role, pageName, router]);

  return { loading: authLoading || idLoading, authenticated, role, authorized };
}
